---
name: publish Spec to Kong
on:
  workflow_dispatch:
    inputs:
      student_api_repo_name:
        description: 'API repository name'
        required: true
      # plugin_repo_name:
      #   description: 'Plugin reposistory name'
      #   required: true
      environment:
        description: 'The environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options: 
          - dev
          - prod
          - test
      select_branch:
        description: Choose the branch name where you want to checkout the code
        required: true
        default: 'feature'

jobs:
  OAS_TO_Kong:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code from api config
        if: ${{ github.event.inputs.environment == 'dev'}}
        uses: actions/checkout@v2
        with:
          repository: 'Ani-maurya/integration-global-kong-configuration'
          ref: '${{ github.event.inputs.select_branch }}'
          token: ${{ secrets.PAT }}
          path: global-config
      
      - name: Checkout Code from api config
        if: ${{ github.event.inputs.environment == 'prod'}}
        uses: actions/checkout@v2
        with:
          repository: 'Ani-maurya/integration-prod-global-kong-configuration'
          ref: '${{ github.event.inputs.select_branch }}'
          token: ${{ secrets.PAT }}
          path: global-config
      
      - name: Checkout Code from api config
        if: ${{ github.event.inputs.environment == 'test'}}
        uses: actions/checkout@v2
        with:
          repository: 'Ani-maurya/integration-test-global-kong-configuration'
          ref: '${{ github.event.inputs.select_branch }}'
          token: ${{ secrets.PAT }}
          path: global-config    

      - name: Checkout Code from API repo
        uses: actions/checkout@v2
        with:
          repository: 'Ani-maurya/${{ github.event.inputs.student_api_repo_name }}'
          ref: '${{ github.event.inputs.select_branch }}'
          token: ${{ secrets.PAT }}
          path: api

      - name: download jq
        run: |
          sudo apt install jq -y
          jq --version
          echo "Aniket"

      - name: download yq
        run: |
          sudo snap install yq
          yq --version

      - name: Find spec file name in the directory
        run: |
          cd api/Apiconfig
          YAML_FILE=$(ls -p | grep -v /)
          echo "file_without_extention=${YAML_FILE%.*}" >> $GITHUB_ENV
          echo "FILE=$YAML_FILE" >> $GITHUB_ENV # setting the  github environment variable name as file value pick fomr YAML_File and use this in the subsquesnt steps 
          
      - name: Install deck CLI
        run: |       
          curl -sL https://github.com/kong/deck/releases/download/v1.34.0/deck_1.34.0_linux_amd64.tar.gz -o deck.tar.gz
          tar -xf deck.tar.gz -C /tmp 
          sudo cp /tmp/deck /usr/local/bin/
      
      - name: Run command to generate Kong config
        run: |
          deck file openapi2kong -s api/Apiconfig/${{ env.FILE }} --select-tag=dev -o kong.yaml
          cat kong.yaml

      - name: API Spec update to the OAS yaml file
        run: |
          export FILE_CONTENT=$(cat api/Apiconfig/${{ env.FILE }})
          echo $FILE_CONTENT
          yq -i eval '.plugins[0].config.api_spec = env(FILE_CONTENT)' global-config/oas-validation.yaml
          cat global-config/oas-validation.yaml

      - name: Append Plugins to new-api.yaml
        run: |
          
          if [ "${{ vars.RATE_LIMITING }}" == "true"  || [ "${{ vars.REQUEST_SIZE_LIMITING }}" == "true" ] || [ "${{ vars.ACL }}" == "true" ] || "${{ vars.OAS_VALIDATION }}" == "true" ] || [ "${{ vars.OPENID_CONNECT }}" ==
          "true" ] ]; then
             cd global-config/kong-global-config
             # for global level plugin
             sed -i '1,2d' request-size-limiting.yaml http-log.yaml ip-restriction.yaml key-auth.yaml rate-limiting.yaml correlation.yaml
            #  sed -i '1d' correlation.yaml
             cat correlation.yaml rate-limiting.yaml request-size-limiting.yaml http-log.yaml ip-restriction.yaml key-auth.yaml  > global-plugins.yaml
             export global_plugins=$(cat global-plugins.yaml)

             cd ../..
             # for service level and route level plugin plugin 
             sed -i '1,2d' global-config/request-size-limiting.yaml  global-config/oas-validation.yaml global-config/open-id.yaml global-config/acl.yaml
             sed -i '1d' global-config/ratelimiting.yaml
             
              # concatenate the service level plugin
             cat  global-config/ratelimiting.yaml global-config/request-size-limiting.yaml global-config/oas-validation.yaml global-config/open-id.yaml > plugins.yaml
             # \\cat plugins.yaml
             export plugin=$(cat plugins.yaml)

             # export the route level plugin
             export route_plugins=$(cat global-config/acl.yaml)

            #  echo $plugins
             cd api/Apiconfig/Kongconfig

             # append the plugin to kong file route and service level
             
             cat ../../../kong.yaml | yq '.plugins += env(global_plugins)' -o yaml | yq '.services.[] += env(plugin)' -o yaml | yq '.services[].routes.[].plugins +=env(route_plugins)' -o yaml > Kong-${{ env.file_without_extention }}.yaml
             # cat new-api.yaml | yq '.services.[] += env(plugin)' -o yaml > modified-api.yaml
             cat Kong-${{ env.file_without_extention }}.yaml
          fi

      - name: Set headers and run deck sync
        run: |
          cd api/Apiconfig/Kongconfig
          cp ../../../plugins.yaml . # copy the plugins file to the Kongconfig directory
          #cat kong-student-api.yaml
          
          # deck file openapi2kong -s test.yaml --select-tag=dev -o kong.yaml

          deck gateway sync  --select-tag dev Kong-${{ env.file_without_extention }}.yaml --konnect-token ${{ secrets.DECK_TOKEN }} --konnect-control-plane-name ${{ vars.CONTROL_PLANE_NAME }}
