---
name: cp-pipeline-data
on:
  # push:
  #   branches:
  #     - main
  workflow_dispatch

jobs:
  OAS_TO_Kong:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code from another repository
        uses: actions/checkout@v2
        with:
          repository: 'Ani-maurya/cp-pipeline-data'
          ref: 'main'
          token: ${{ secrets.PAT }}

      - name: download jq
        run: |
          sudo apt install jq -y
          jq --version

      - name: download yq
        run: |
          sudo snap install yq
          yq --version

      - name: Install deck CLI
        run: >
          curl -sL
          https://github.com/kong/deck/releases/download/v1.34.0/deck_1.34.0_linux_amd64.tar.gz
          -o deck.tar.gz

          tar -xf deck.tar.gz -C /tmp 

          sudo cp /tmp/deck /usr/local/bin/

          deck file openapi2kong -s Student_v0.4.yml --select-tag=dev -o kong.yaml

      - name: Append Plugins to new-api.yaml
        run: |
          if [ "${{ vars.RATE_LIMITING }}" == "true"  || [ "${{ vars.REQUEST_SIZE_LIMITING }}" == "true" ] || "${{ vars.OAS_VALIDATION }}" == "true" ] || [ "${{ vars.OPENID_CONNECT }}" ==
          "true" ] ]; then
             sed -i '1,2d' request-size-limiting.yaml  oas-validation.yaml open-id.yaml
             sed -i '1d' ratelimiting.yaml
             sed -i '1d' acl.yaml
             cat  ratelimiting.yaml request-size-limiting.yaml oas-validation.yaml open-id.yaml > combined-plugins.yaml
             cat combined-plugins.yaml
             export plugins=$(cat combined-plugins.yaml)
             export route_plugins=$(cat acl.yaml)
             echo $plugins
             cat kong.yaml | yq '.services.[] += env(plugins)' -o yaml | yq '.services[].routes.[].plugins +=env(route_plugins)' -o yaml > modified-api.yaml
             # cat new-api.yaml | yq '.services.[] += env(plugins)' -o yaml > modified-api.yaml
          fi

      - name: Set headers and run deck sync
        run: |
          cat modified-api.yaml
          
      #     # deck file openapi2kong -s test.yaml --select-tag=dev -o kong.yaml

      #     deck gateway sync  --select-tag dev modified-api.yaml --konnect-token ${{ secrets.DECK_TOKEN }} --konnect-control-plane-name ${{ vars.CONTROL_PLANE_NAME }}
          
  publish-customer-api-to-portal:
    name: Publish OAS to dev portal
    needs: OAS_TO_Kong
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code from another repository
        uses: actions/checkout@v2
        with:
          repository: Ani-maurya/cp-pipeline-data
          ref: main
          token: ${{ secrets.PAT }}

      - name: Fech environment variables
        id: set_env_vars
        run: |
          echo "API_PRODUCT_NAME: ${{ vars.API_PRODUCT_NAME }}"
          echo "CONTROL_PLANE_NAME: ${{ vars.CONTROL_PLANE_NAME }}" 
          echo "GATEWAY_SERVICE_NAME: ${{ vars.GATEWAY_SERVICE_NAME }}" 

      - name: Check API Product is already exist or not or Creating new API product
        run: |
          response=$(curl -s --request GET \
            --url "${{ vars.ADMIN_API_URL }}/api-products" \
            --header "Authorization: ${{ secrets.PIPELINE_TOKEN }}")

          if [[ $response == *"${{ vars.API_PRODUCT_NAME }}"* ]]; then
              echo "API product already exists, Please change the API product name"
          else
            echo "API product dosen't exist, creating..."
            curl --request POST \
              --url ${{ vars.ADMIN_API_URL }}/api-products \
              --header 'Authorization: ${{ secrets.PIPELINE_TOKEN }}' \
              --header 'Content-Type: application/json' \
              --data '{
                "name": "${{ vars.API_PRODUCT_NAME }}",
                "description": "Creating through admin api",
                "labels": {}
              }'
          fi 

      - name: Get API product ID
        run: >
          api_product_name="${{ vars.API_PRODUCT_NAME }}"

          api_product_id=$(curl --request GET \
            --url ${{ vars.ADMIN_API_URL }}/api-products \
            --header 'Authorization: ${{ secrets.PIPELINE_TOKEN }}' \
            | jq -r --arg api_product_name "$api_product_name" '.data[] | select(.name == $api_product_name) | .id // empty')

          if [ "$api_product_id" = "empty" ]; then
            echo "Error: API Product ID not found."
            exit 1
          fi

          echo "API_PRODUCT_ID=$api_product_id" >> $GITHUB_ENV 

      - name: Get Dev Portal ID
        run: |
          Dev_portal_id=$(curl --request GET \
            --url ${{ vars.ADMIN_API_URL }}/portals \
            --header 'Authorization: ${{ secrets.PIPELINE_TOKEN }}' \
            | jq -r '.data[].id')
              echo "DEV_PORTAL_ID=$Dev_portal_id" >> $GITHUB_ENV

      - name: Publish product to the dev portal
        run: |
          echo "API Product ID: $API_PRODUCT_ID"
          echo "Dev Portal ID: $DEV_PORTAL_ID"
          curl --request PATCH \
           --url ${{ vars.ADMIN_API_URL }}/api-products/$API_PRODUCT_ID \
           --header 'Authorization: ${{ secrets.PIPELINE_TOKEN }}' \
           --header 'Content-Type: application/json' \
           --data "{
             \"portal_ids\":[\"$DEV_PORTAL_ID\"]
           }"

      - name: Create the product version
        run: >
          echo "API Product ID: $API_PRODUCT_ID"

          api_product_version_id=$(curl --request POST \
            --url ${{ vars.ADMIN_API_URL }}/api-products/$API_PRODUCT_ID/product-versions \
            --header 'Authorization: ${{ secrets.PIPELINE_TOKEN }}' \
            --header 'Content-Type: application/json' \
            --data '{
              "name": "v1",
              "publish_status": "published",
              "gateway_service": null
            }'| jq -r '.id')
              echo "API_Product_Version_ID=$api_product_version_id" >> $GITHUB_ENV
              echo "API Product Version ID: $API_Product_Version_ID"

      - name: Get Control Plane ID
        run: >
          control_plane_name="${{ vars.CONTROL_PLANE_NAME }}"

          control_plane_id=$(curl --location '${{ vars.ADMIN_API_URL }}/control-planes' \

          --header 'Authorization: ${{ secrets.PIPELINE_TOKEN }}' \

          | jq -r --arg control_plane_name "$control_plane_name" '.data[] | select(.name == $control_plane_name) | .id')

          echo "Control_Plane_ID=$control_plane_id" >> $GITHUB_ENV

      - name: Get Service ID
        run: >
          echo "Control Plane Id: $Control_Plane_ID"

          gateway_service_name="${{ vars.GATEWAY_SERVICE_NAME }}"

          service_id=$(curl --location "${{ vars.ADMIN_API_URL }}/control-planes/$Control_Plane_ID/core-entities/services" \
            --header 'Authorization: ${{ secrets.PIPELINE_TOKEN }}' \
            | jq -r --arg gateway_service_name "$gateway_service_name" '.data[] | select(.name == $gateway_service_name) | .id')
          echo "Service_ID=$service_id" >> $GITHUB_ENV

      - name: Link service to the product version
        run: >
          echo "API PRODUCT ID: $API_PRODUCT_ID"

          echo "Control Plane ID: $Control_Plane_ID"

          echo "Service ID: $Service_ID"

          echo "API Product Version ID: $API_Product_Version_ID"

          curl --location --request PATCH "${{ vars.ADMIN_API_URL }}/api-products/$API_PRODUCT_ID/product-versions/$API_Product_Version_ID" \
                --header 'Authorization: ${{ secrets.PIPELINE_TOKEN }}' \
                --header 'Content-Type: application/json' \
                --data "{
                        \"name\": \"v1\",
                        \"publish_status\": \"published\",
                        \"deprecated\": false,
                        \"notify\": true,
                        \"gateway_service\": {
                        \"control_plane_id\": \"$Control_Plane_ID\",
                        \"id\": \"$Service_ID\"
                                }
                       }"

      - name: Upload spec on the version
        run: |
          echo "API PRODUCT ID: $API_PRODUCT_ID"
          echo "API Product Version ID: $API_Product_Version_ID"
          encoded_spec=$(base64 -w 0 Student_v0.4.yml)
          echo $encoded_spec
          curl --location --request POST "${{ vars.ADMIN_API_URL }}/api-products/$API_PRODUCT_ID/product-versions/$API_Product_Version_ID/specifications" \
            --header 'Authorization: ${{ secrets.PIPELINE_TOKEN }}' \
            --header 'Content-Type: application/json' \
            --data '{
                    "name": "Student.yaml",
                    "content": "'"$encoded_spec"'"
                  }'
